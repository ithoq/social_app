"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var core_2 = require("@angular/core");
var ng2_tag_input_module_1 = require("../../ng2-tag-input.module");
var forms_2 = require("@angular/forms");
var common_1 = require("@angular/common");
function getItems() {
    return ['Javascript', 'Typescript'];
}
var validators = [forms_1.Validators.minLength(3), function (control) {
        if (control.value.charAt(0) !== '@') {
            return {
                'startsWithAt@': true
            };
        }
        return null;
    }];
var BasicTagInputComponent = (function () {
    function BasicTagInputComponent() {
        this.items = getItems();
    }
    return BasicTagInputComponent;
}());
BasicTagInputComponent = __decorate([
    core_1.Component({
        selector: 'test-app',
        template: "<tag-input [(ngModel)]=\"items\"></tag-input>"
    }),
    __metadata("design:paramtypes", [])
], BasicTagInputComponent);
exports.BasicTagInputComponent = BasicTagInputComponent;
var TagInputComponentWithOutputs = (function () {
    function TagInputComponentWithOutputs() {
        this.items = getItems();
        this.validators = validators;
    }
    TagInputComponentWithOutputs.prototype.onAdd = function (item) { };
    TagInputComponentWithOutputs.prototype.onRemove = function (item) { };
    return TagInputComponentWithOutputs;
}());
TagInputComponentWithOutputs = __decorate([
    core_1.Component({
        selector: 'test-app',
        template: "<tag-input\n                  [(ngModel)]=\"items\"\n                  (onRemove)=\"onRemove($event)\"\n                  (onAdd)=\"onAdd($event)\">\n              </tag-input>"
    }),
    __metadata("design:paramtypes", [])
], TagInputComponentWithOutputs);
exports.TagInputComponentWithOutputs = TagInputComponentWithOutputs;
var TagInputComponentWithValidation = (function () {
    function TagInputComponentWithValidation() {
        this.items = getItems();
        this.validators = validators;
    }
    TagInputComponentWithValidation.prototype.onAdd = function (item) { };
    TagInputComponentWithValidation.prototype.onRemove = function (item) { };
    return TagInputComponentWithValidation;
}());
TagInputComponentWithValidation = __decorate([
    core_1.Component({
        selector: 'test-app',
        template: "<tag-input\n                  [(ngModel)]=\"items\"\n                  [validators]=\"validators\"\n                  (onRemove)=\"onRemove($event)\"\n                  (onAdd)=\"onAdd($event)\">\n              </tag-input>"
    }),
    __metadata("design:paramtypes", [])
], TagInputComponentWithValidation);
exports.TagInputComponentWithValidation = TagInputComponentWithValidation;
var TagInputComponentWithTransformer = (function () {
    function TagInputComponentWithTransformer() {
        this.items = getItems();
        this.validators = validators.splice(0, 1);
    }
    TagInputComponentWithTransformer.prototype.addPrefix = function (item) {
        return "prefix: " + item;
    };
    return TagInputComponentWithTransformer;
}());
TagInputComponentWithTransformer = __decorate([
    core_1.Component({
        selector: 'test-app',
        template: "<tag-input [(ngModel)]=\"items\"\n                          [validators]=\"validators\"\n                          [transform]=\"addPrefix\">\n                         </tag-input>"
    }),
    __metadata("design:paramtypes", [])
], TagInputComponentWithTransformer);
exports.TagInputComponentWithTransformer = TagInputComponentWithTransformer;
var TagInputComponentWithPlaceholder = (function () {
    function TagInputComponentWithPlaceholder() {
        this.items = getItems();
    }
    return TagInputComponentWithPlaceholder;
}());
TagInputComponentWithPlaceholder = __decorate([
    core_1.Component({
        selector: 'test-app',
        template: "<tag-input [(ngModel)]=\"items\" [placeholder]=\"'New Tag'\"></tag-input>"
    }),
    __metadata("design:paramtypes", [])
], TagInputComponentWithPlaceholder);
exports.TagInputComponentWithPlaceholder = TagInputComponentWithPlaceholder;
var TagInputComponentWithMaxItems = (function () {
    function TagInputComponentWithMaxItems() {
        this.items = getItems();
    }
    return TagInputComponentWithMaxItems;
}());
TagInputComponentWithMaxItems = __decorate([
    core_1.Component({
        selector: 'test-app',
        template: "<tag-input [(ngModel)]=\"items\" [maxItems]=\"2\"></tag-input>"
    }),
    __metadata("design:paramtypes", [])
], TagInputComponentWithMaxItems);
exports.TagInputComponentWithMaxItems = TagInputComponentWithMaxItems;
var TagInputComponentWithAutocomplete = (function () {
    function TagInputComponentWithAutocomplete() {
        this.items = getItems();
    }
    return TagInputComponentWithAutocomplete;
}());
TagInputComponentWithAutocomplete = __decorate([
    core_1.Component({
        selector: 'test-app',
        template: "<tag-input [(ngModel)]=\"items\"\n                                 [autocompleteItems]=\"['item1', 'item2', 'itam3']\"\n                                 [autocomplete]=\"true\"></tag-input>"
    }),
    __metadata("design:paramtypes", [])
], TagInputComponentWithAutocomplete);
exports.TagInputComponentWithAutocomplete = TagInputComponentWithAutocomplete;
var TagInputComponentWithTemplate = (function () {
    function TagInputComponentWithTemplate() {
        this.items = getItems();
    }
    return TagInputComponentWithTemplate;
}());
TagInputComponentWithTemplate = __decorate([
    core_1.Component({
        selector: 'test-app',
        template: "<tag-input [(ngModel)]=\"items\">\n                     <div class=\"custom_class\" *ngFor=\"let item of items\" (click)=\"selectItem(item)\">\n                        <span class=\"tag__name\">{{ item }}</span>\n                        <span (click)=\"remove(item)\"><img src=\"delete.png\" /></span>\n                     </div>\n                </tag-input>"
    }),
    __metadata("design:paramtypes", [])
], TagInputComponentWithTemplate);
exports.TagInputComponentWithTemplate = TagInputComponentWithTemplate;
var TagInputComponentWithOnlyAutocomplete = (function () {
    function TagInputComponentWithOnlyAutocomplete() {
        this.items = getItems();
    }
    return TagInputComponentWithOnlyAutocomplete;
}());
TagInputComponentWithOnlyAutocomplete = __decorate([
    core_1.Component({
        selector: 'test-app',
        template: "<tag-input [(ngModel)]=\"items\"\n                           [onlyFromAutocomplete]=\"true\"\n                           [autocompleteItems]=\"['item1', 'item2', 'itam3']\"\n                           [autocomplete]=\"true\"></tag-input>"
    }),
    __metadata("design:paramtypes", [])
], TagInputComponentWithOnlyAutocomplete);
exports.TagInputComponentWithOnlyAutocomplete = TagInputComponentWithOnlyAutocomplete;
var COMPONENTS = [
    BasicTagInputComponent,
    TagInputComponentWithPlaceholder,
    TagInputComponentWithOutputs,
    TagInputComponentWithTransformer,
    TagInputComponentWithValidation,
    TagInputComponentWithMaxItems,
    TagInputComponentWithTemplate,
    TagInputComponentWithAutocomplete,
    TagInputComponentWithOnlyAutocomplete
];
var TestModule = (function () {
    function TestModule() {
    }
    return TestModule;
}());
TestModule = __decorate([
    core_2.NgModule({
        imports: [common_1.CommonModule, forms_2.FormsModule, ng2_tag_input_module_1.TagInputModule],
        declarations: COMPONENTS.slice(),
        exports: COMPONENTS.slice()
    }),
    __metadata("design:paramtypes", [])
], TestModule);
exports.TestModule = TestModule;
//# sourceMappingURL=testing-helpers.js.map