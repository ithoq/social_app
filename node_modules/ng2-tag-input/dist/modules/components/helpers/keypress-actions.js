import { ACTIONS_KEYS, KEY_PRESS_ACTIONS } from './constants';
export function getAction(action) {
    switch (KEY_PRESS_ACTIONS[action]) {
        case ACTIONS_KEYS.DELETE:
            return deleteSelectedTag;
        case ACTIONS_KEYS.SWITCH_PREV:
            return switchPrev;
        case ACTIONS_KEYS.SWITCH_NEXT:
            return switchNext;
        case ACTIONS_KEYS.TAB:
            return switchNext;
        default:
            return function () { };
    }
}
function deleteSelectedTag() {
    if (this.selectedTag) {
        this.removeItem(this.selectedTag);
    }
}
function switchPrev(item) {
    if (this.tags.first.model !== item) {
        var tags = this.tags.toArray();
        var tagIndex = tags.findIndex(function (tag) { return tag.model === item; });
        var tag = tags[tagIndex - 1];
        tag.select.call(tag);
    }
}
function switchNext(item) {
    if (this.tags.last.model === item) {
        this.focus(true);
        return;
    }
    var tags = this.tags.toArray();
    var tagIndex = tags.findIndex(function (tag) { return tag.model === item; });
    var tag = tags[tagIndex + 1];
    tag.select.call(tag);
}
//# sourceMappingURL=keypress-actions.js.map