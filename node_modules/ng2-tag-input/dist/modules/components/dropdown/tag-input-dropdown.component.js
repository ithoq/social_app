var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Component, ViewChild, forwardRef, Inject, TemplateRef, ContentChildren, Input, QueryList, HostListener } from '@angular/core';
import { TagInputComponent } from '../tag-input';
import { Ng2Dropdown } from 'ng2-material-dropdown';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/filter';
export var TagInputDropdown = (function () {
    function TagInputDropdown(tagInput) {
        this.tagInput = tagInput;
        this.offset = '50 0';
        this.focusFirstElement = false;
        this.showDropdownIfEmpty = false;
        this.items = [];
        this._autocompleteItems = [];
    }
    Object.defineProperty(TagInputDropdown.prototype, "autocompleteItems", {
        get: function () {
            return this._autocompleteItems;
        },
        set: function (items) {
            this._autocompleteItems = items ? items.map(function (item) {
                if (typeof item === 'string') {
                    return { display: item, value: item };
                }
                else {
                    return item;
                }
            }) : [];
        },
        enumerable: true,
        configurable: true
    });
    TagInputDropdown.prototype.ngOnInit = function () {
        var _this = this;
        this.onItemClicked().subscribe(function (item) {
            _this.addNewItem(item);
        });
        this.onHide().subscribe(function () {
            _this.resetItems();
        });
        this.tagInput.inputForm.onKeyup.subscribe(function () {
            _this.show();
        });
        if (this.autocompleteObservable) {
            this.tagInput
                .onTextChange
                .filter(function (text) { return !!text.trim().length; })
                .subscribe(this.getItemsFromObservable.bind(this));
        }
    };
    TagInputDropdown.prototype.updatePosition = function (position) {
        return this.dropdown.menu.updatePosition(position);
    };
    Object.defineProperty(TagInputDropdown.prototype, "isVisible", {
        get: function () {
            return this.dropdown.menu.state.menuState.isVisible;
        },
        enumerable: true,
        configurable: true
    });
    TagInputDropdown.prototype.onHide = function () {
        return this.dropdown.onHide;
    };
    TagInputDropdown.prototype.onItemClicked = function () {
        return this.dropdown.onItemClicked;
    };
    Object.defineProperty(TagInputDropdown.prototype, "selectedItem", {
        get: function () {
            return this.dropdown.menu.state.dropdownState.selectedItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagInputDropdown.prototype, "state", {
        get: function () {
            return this.dropdown.menu.state;
        },
        enumerable: true,
        configurable: true
    });
    TagInputDropdown.prototype.addNewItem = function (item) {
        var _this = this;
        if (!item) {
            return;
        }
        if (this.tagInput.isTagValid(item.value, true)) {
            this.tagInput.appendNewTag(item.value);
        }
        this.tagInput.setInputValue('');
        setTimeout(function () { return _this.tagInput.inputForm.focus(); }, 0);
        this.dropdown.hide();
    };
    TagInputDropdown.prototype.show = function () {
        var value = this.tagInput.inputForm.value.value;
        var position = this.tagInput.inputForm.getElementPosition();
        var items = this.getMatchingItems(value);
        var hasItems = items.length > 0;
        var showDropdownIfEmpty = this.showDropdownIfEmpty && !value && hasItems;
        this.items = items;
        if ((hasItems || showDropdownIfEmpty) && !this.isVisible) {
            this.dropdown.toggleMenu(position);
        }
        else if (!hasItems && this.isVisible) {
            this.dropdown.hide();
        }
    };
    TagInputDropdown.prototype.getMatchingItems = function (value) {
        var _this = this;
        if (!value && !this.showDropdownIfEmpty) {
            return [];
        }
        var matchesFn = function (item) {
            return item && item.toString()
                .toLowerCase()
                .indexOf(value.toLowerCase()) >= 0 || false;
        };
        var matchesValue = function (item) {
            return typeof item === 'string' ?
                matchesFn(item) :
                matchesFn(item[_this.tagInput.displayBy]) || matchesFn(item[_this.tagInput.identifyBy]);
        };
        return this.autocompleteItems.filter(function (item) {
            var hasValue = !!_this.tagInput.tags.find(function (tag) { return tag.model === item; });
            return (matchesValue(item) === true) && (hasValue === false);
        });
    };
    TagInputDropdown.prototype.resetItems = function () {
        this.items = [];
    };
    TagInputDropdown.prototype.scrollListener = function () {
        if (!this.isVisible) {
            return;
        }
        this.updatePosition(this.tagInput.inputForm.getElementPosition());
    };
    TagInputDropdown.prototype.populateItems = function (data) {
        var terms = data.map(function (item) { return ({ display: item, value: item }); });
        this.autocompleteItems = this.autocompleteItems.concat(terms);
        this.show();
    };
    TagInputDropdown.prototype.getItemsFromObservable = function (text) {
        var _this = this;
        this.tagInput.isLoading = true;
        this.autocompleteObservable(text)
            .subscribe(function (data) {
            _this.tagInput.isLoading = false;
            _this.populateItems(data);
        });
    };
    __decorate([
        ViewChild(Ng2Dropdown), 
        __metadata('design:type', Ng2Dropdown)
    ], TagInputDropdown.prototype, "dropdown", void 0);
    __decorate([
        ContentChildren(TemplateRef), 
        __metadata('design:type', QueryList)
    ], TagInputDropdown.prototype, "templates", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], TagInputDropdown.prototype, "offset", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], TagInputDropdown.prototype, "focusFirstElement", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Array), 
        __metadata('design:paramtypes', [Array])
    ], TagInputDropdown.prototype, "autocompleteItems", null);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], TagInputDropdown.prototype, "showDropdownIfEmpty", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Function)
    ], TagInputDropdown.prototype, "autocompleteObservable", void 0);
    __decorate([
        HostListener('window:scroll'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], TagInputDropdown.prototype, "scrollListener", null);
    TagInputDropdown = __decorate([
        Component({
            selector: 'tag-input-dropdown',
            templateUrl: './tag-input-dropdown.template.html'
        }),
        __param(0, Inject(forwardRef(function () { return TagInputComponent; }))), 
        __metadata('design:paramtypes', [TagInputComponent])
    ], TagInputDropdown);
    return TagInputDropdown;
}());
//# sourceMappingURL=tag-input-dropdown.component.js.map